{"version":3,"file":"main.248c81866d278dfbe8c5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAxCA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAIA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AAAA;AAYA;AAAA;AAAA;AACA;AAOA;AAGA;AAXA;AAaA;AAAA;AACA;AAKA;AAGA;AATA","sources":["webpack://pms_grid/./src/stories/Grid.stories.tsx","webpack://pms_grid/./src/grid.tsx","webpack://pms_grid/./src/grid_element.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta } from \\\"@storybook/react\\\";\\nimport React from \\\"react\\\";\\nimport { ComponentStory } from \\\"@storybook/react\\\";\\nimport { PMSGrid } from \\\"../types\\\";\\nimport Grid from \\\"../grid\\\";\\n\\nexport default {\\n    title: 'PMSGrid/Grid',\\n    component: Grid,\\n    // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\\n    argTypes: {\\n      columnsOptions: {\\n        color: {control:\\\"color\\\"}\\n      }\\n    },\\n  } as ComponentMeta<typeof Grid>;\\n\\nconst Template: ComponentStory<typeof Grid> = (args) => <Grid {...args} />;\\n\\nconst testData:PMSGrid.GridData = {\\n    columns: [\\n        {\\n            innerContent: \\\"Test Column 1\\\",\\n            drop: false,\\n        }\\n    ],\\n    rows: [],\\n    cells: []\\n}\\n\\nexport const BasicGrid = Template.bind({});\\n// More on args: https://storybook.js.org/docs/react/writing-stories/args\\nBasicGrid.args = {\\n    width: 500,\\n    height: 500,\\n    data: testData\\n};\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"BasicGrid\":{\"startLoc\":{\"col\":46,\"line\":18},\"endLoc\":{\"col\":74,\"line\":18},\"startBody\":{\"col\":46,\"line\":18},\"endBody\":{\"col\":74,\"line\":18}}};\n    \nimport { ComponentMeta } from \"@storybook/react\";\nimport React from \"react\";\nimport { ComponentStory } from \"@storybook/react\";\nimport { PMSGrid } from \"../types\";\nimport Grid from \"../grid\";\n\nexport default {\n    title: 'PMSGrid/Grid',\n    component: Grid,\n    // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\n    argTypes: {\n      columnsOptions: {\n        color: {control:\"color\"}\n      }\n    },\n  } as ComponentMeta<typeof Grid>;\n\nconst Template: ComponentStory<typeof Grid> = (args) => <Grid {...args} />;\n\nconst testData:PMSGrid.GridData = {\n    columns: [\n        {\n            innerContent: \"Test Column 1\",\n            drop: false,\n        }\n    ],\n    rows: [],\n    cells: []\n}\n\nexport const BasicGrid = Template.bind({});\n// More on args: https://storybook.js.org/docs/react/writing-stories/args\nBasicGrid.args = {\n    width: 500,\n    height: 500,\n    data: testData\n};\n\n\nBasicGrid.parameters = { storySource: { source: \"(args) => <Grid {...args} />\" }, ...BasicGrid.parameters };","import React from 'react';\nimport { PMSGrid } from './types';\nimport { Container, SContainer } from './grid_element';\nimport { Columns } from './Component/Columns';\nimport { Rows } from './Component/Rows';\n\n\nexport default class Grid extends React.Component {\n\n    constructor(props:PMSGrid.GridOptions) {\n        super(props);\n        this.state = {\n            width:props.width,\n            height:props.height\n        }\n    }\n\n    state:PMSGrid.GridOptions = {\n        data: {\n            columns:[],\n            rows:[],\n            cells:[]\n        },\n        width: 0,\n        height: 0\n    }\n\n    componentDidMount(): void {\n        \n    }\n\n    componentWillUnmount(): void {\n        \n    }\n\n    setWidth = (sWidth:number) => {\n        this.setState({\n            width: sWidth \n        });\n    }\n\n    setHeight = (sHeight:number) => {\n        this.setState({\n            height: sHeight\n        });\n    }\n\n    setData = (sData:PMSGrid.GridData) => {\n        this.setState({\n            data: sData\n        })\n    }\n\n    render(): React.ReactNode {\n        return(\n            <>\n                <Container width={this.state.width} height={this.state.height}>\n                    <Columns columnsOptions={this.state.data?.columns} />\n                    <SContainer>\n                        <Rows rowsOptions={this.state.data?.rows} />\n                    </SContainer>\n                </Container>\n            </>\n        );\n    }\n}","import styled from \"styled-components\"\nimport React from \"react\"\n\ninterface ContainerProps {\n    children: React.ReactNode;\n    width: number;\n    height: number;    \n}\n\ninterface SContainerProps {\n    children: React.ReactNode;\n}\n\nexport const Container = ({width, height}:ContainerProps) => {\n    const GridContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    border-style: solid;\n    width: ${width}px;\n    height: ${height}px;\n    `\n    return (\n        <GridContainer></GridContainer>\n    )\n}\n\nexport const SContainer = ({}:SContainerProps) => {\n    const RowAndCellContainer = styled.div`\n    display:flex;\n    flex-direction: row;\n    `\n\n    return (\n        <RowAndCellContainer></RowAndCellContainer>\n    )\n}"],"names":[],"sourceRoot":""}